-- PARENT
-- ID(PK), 이름, 나이, 주소, 핸드폰, 성별

CREATE SEQUENCE SEQ_PARENT;
CREATE TABLE TBL_PARENT(
	ID NUMBER CONSTRAINT PK_PARENT PRIMARY KEY,
	PARENT_NAME VARCHAR2(255) NOT NULL,
	PARENT_AGE NUMBER,
	PARENT_ADDRESS VARCHAR2(255) NOT NULL,
	PARENT_PHONE VARCHAR2(255) NOT NULL,
	PARENT_GENDER CHAR(10),
	CONSTRAINT GENDER_TYPE CHECK(PARENT_GENDER IN('M', 'W'))
);

-- SELECT 컬럼명1, 컬럼명2, ...
-- FROM 테이블1, 테이블2,.. 
-- WHERE 조건절
SELECT *
FROM TBL_PARENT;

--INSERT INTO TBL_PARENT(컬럼명1, 컬럼명2,...)
-- VALUES(값1, 값2,...)
INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL, '홍길동', '30', '경기도 과천시', '010-1234-5678', 'M' ); 

INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL, '장보고', '37', '경기도 군포시', '010-4456-1123', 'M' );

INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL, '김영희', '45', '경기도 안산시', '010-8813-6644', 'W' );

INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL, '김철수', '50', '서울시 관악구', '010-8813-6644', 'M' );

INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL, '이태희', '42', '경기도 고양시', '010-7711-2453', 'W' );


SELECT * FROM TBL_PARENT;

SELECT PARENT_NAME
FROM TBL_PARENT
WHERE PARENT_GENDER = 'M';

-- 40대 부모 데이터 중 여성
SELECT *
FROM TBL_PARENT
WHERE PARENT_AGE >= 40 AND PARENT_GENDER = 'W' ;

/*
 * 
 * LIKE: 포함된 문자열 값을 찾고, 문자의 개수도 제한을 줄 수 있다.
 * 
 * %: 모든 것
 * _: 글자 수
 * 
 * 예시
	 '%A' : A로 끝나는 모든 값(NDFLSNJFA, 123NFJA, ...)
	 'A%' : A로 시작하는 모든 값(AA, ANDKFS, AJD, ...)
	 'A__' : A로 시작하며 3글자인 값(ABC, AAA, ADD, ...)
	 '_A' : A로 끝나며 2글자인 값(FA, CA, DA, ...)
	 '%A%' : A가 포함된 값(APPLE, BANANA, TASK, ...)
 * 
 * */

-- 경기도에 거주중인 부모를 조회
SELECT *
FROM TBL_PARENT
WHERE PARENT_ADDRESS LIKE '경기도%';

-- 이름이 '희'로 끝나는 부모의 데이터 조회
SELECT *
FROM TBL_PARENT 
WHERE PARENT_NAME LIKE '%희';

SELECT *
FROM TBL_PARENT 
WHERE PARENT_ADDRESS NOT LIKE '%과천%';


-- ======================================================================

-- 집계 함수
CREATE SEQUENCE SEQ_FIELD_TRIP;
CREATE TABLE TBL_FIELD_TRIP(
	ID NUMBER CONSTRAINT PK_FIELD_TRIP PRIMARY KEY,
	FIELD_TRIP_TITLE VARCHAR2(255),
	FIELD_TRIP_CONTENT VARCHAR2(255),
	FIELD_TRIP_NUMBER NUMBER
);

INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '어서와 매미농장', '매미 잡자 매미 잡자', 20);
INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '아이스크림 빨리 먹기 대회', '아이스크림 누가 잘 먹나', 100);
INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '고구마 심기', '고구마가 왕 커요', 10);
INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '숭어 얼음 낚시', '숭어 잡아 추워도 참아!', 80);
INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '커피 체험 공장', '커피 빈 객체화', 60);
INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '치즈 제작하기', '여기 치즈 저기 치즈 이쪽 치즈', 5);
INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '승마 체험', '이리야!', 9);


SELECT *
FROM TBL_FIELD_TRIP;


/*집계 함수
 * 
 * 평균 AVG()
 * 최대값 MAX()
 * 최소값 MIN()
 * 총 합 SUM()
 * 개수 COUNT()
 * 
 * */

SELECT COUNT(*)
FROM TBL_FIELD_TRIP;

SELECT COUNT(ID)
FROM TBL_FIELD_TRIP;

-- "": 컬럼명
SELECT SUM(FIELD_TRIP_NUMBER) AS "총 수용인원"
FROM TBL_FIELD_TRIP;


-- 체험학습당 평균 인원수
-- ROUND(값, 자릿수) 
SELECT ROUND(AVG(FIELD_TRIP_NUMBER), 1) AS "평균 인원"
FROM TBL_FIELD_TRIP;

-- 반올림
SELECT ROUND(AVG(FIELD_TRIP_NUMBER)) AS "평균 인원"
FROM TBL_FIELD_TRIP;

-- 내림
SELECT FLOOR(AVG(FIELD_TRIP_NUMBER)) AS "평균 인원"
FROM TBL_FIELD_TRIP;

-- 올림
SELECT CEIL(AVG(FIELD_TRIP_NUMBER)) AS "평균 인원"
FROM TBL_FIELD_TRIP;

-- 제목이 '체험'글자를 포함하는 체험학습의 총 인원수 조회 WHERE LIKE , SUM
SELECT SUM(FIELD_TRIP_NUMBER) AS "체험 글자를 포함한 체험의 총 인원"
FROM TBL_FIELD_TRIP
WHERE FIELD_TRIP_TITLE LIKE '%체험%';


-- 1) 체험학습 제목에 고구마 또는 아이스크림이 들어간 체험 학습의 평균 인원수
SELECT AVG(FIELD_TRIP_NUMBER) AS "체험 학습의 평균 인원수"
FROM TBL_FIELD_TRIP
WHERE FIELD_TRIP_TITLE LIKE '%고구마%' OR FIELD_TRIP_TITLE LIKE '%아이스크림%';


-- 2) 체험학습 제목에 '기'로 끝나는 체험 학습의 최소 인원수
SELECT MIN(FIELD_TRIP_NUMBER) AS "체험학습 제목에 '기'로 끝나는 체험 학습의 최소 인원수"
FROM TBL_FIELD_TRIP
WHERE FIELD_TRIP_TITLE LIKE '%기';



SELECT *
FROM TBL_FIELD_TRIP;


-- 평균 인원보다 인원 수가 많은 체험학습을 조회
-- 집계 함수를 사용할 수 있는 위치
-- 1. SELECT 절
-- 2. HAVING 절
--SELECT *
--FROM TBL_FIELD_TRIP
--WHERE FIELD_TRIP_NUMBER > AVG(FIELD_TRIP_NUMBER);

-- GROUP BY
-- HAVING 


