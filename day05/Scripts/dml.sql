-- 사용자
CREATE SEQUENCE SEQ_USER;
CREATE TABLE TBL_USER(
	ID NUMBER CONSTRAINT PK_USER PRIMARY KEY,
	USER_EMAIL VARCHAR2(255) NOT NULL UNIQUE,
	USER_PASSWORD VARCHAR2(255) NOT NULL,
	USER_ADDRESS VARCHAR2(255),
	USER_BIRTH DATE
);

-- 게시판
CREATE SEQUENCE SEQ_POST;
CREATE TABLE TBL_POST(
	ID NUMBER CONSTRAINT PK_POST PRIMARY KEY,
	POST_TITLE VARCHAR2(255),
	POST_CONTENT VARCHAR2(255),
	USER_ID NUMBER,
	CONSTRAINT FK_POST_USER FOREIGN KEY(USER_ID)
	REFERENCES TBL_USER(ID)
);

-- 댓글(몇 번 유저가 몇 번 게시판에 댓글을 달았나?)
CREATE SEQUENCE SEQ_REPLY;
CREATE TABLE TBL_REPLY(
	ID NUMBER CONSTRAINT PK_REPLY PRIMARY KEY,
	REPLY_CONTENT VARCHAR2(255),
	USER_ID NUMBER,
	POST_ID NUMBER,
	CONSTRAINT FK_REPLY_USER FOREIGN KEY(USER_ID)
	REFERENCES TBL_USER(ID),
	CONSTRAINT FK_REPLY_POST FOREIGN KEY(POST_ID)
	REFERENCES TBL_POST(ID)
);


INSERT INTO TBL_USER
VALUES(SEQ_USER.NEXTVAL, 'hgd1234@gmail.com', '1234', '서울시 강남구', '2002-07-15');
INSERT INTO TBL_USER
VALUES(SEQ_USER.NEXTVAL, 'jbg1234@gmail.com', '1234', '경기도 성남시', '1995-01-23');
INSERT INTO TBL_USER
VALUES(SEQ_USER.NEXTVAL, 'lss1234@gmail.com', '1234', '수원시 팔달구', '1998-03-01');
INSERT INTO TBL_USER
VALUES(SEQ_USER.NEXTVAL, 'kyh1234@naver.com', '1234', '서울시 마포구', '2002-07-15');
INSERT INTO TBL_USER
VALUES(SEQ_USER.NEXTVAL, 'kcs1234@naver.com', '1234', '서울시 동작구', '1992-03-30');
INSERT INTO TBL_USER
VALUES(SEQ_USER.NEXTVAL, 'cjs1234@gmail.com', '1234', '화성시 동탄', '2002-02-18');


INSERT INTO TBL_POST 
VALUES(SEQ_POST.NEXTVAL, '이승찬 맥북 갔다버려!', '컴퓨터는 역시 그램', 1);
INSERT INTO TBL_POST 
VALUES(SEQ_POST.NEXTVAL, '배승원 카드놀이 좀 그만해', '알탭 천재 배승원', 2);
INSERT INTO TBL_POST 
VALUES(SEQ_POST.NEXTVAL, '마우스 뭐가 좋아요?', '마우스가 고장났는데, 새로 사고 싶어요', 3);
INSERT INTO TBL_POST 
VALUES(SEQ_POST.NEXTVAL, '100만원으로 살 수 있는 컴퓨터 추천 좀', '기존의 컴퓨터 고장났어요', 5);
INSERT INTO TBL_POST 
VALUES(SEQ_POST.NEXTVAL, '아직 다 못썼어요', '제가 아직 안썼어요! 저는 몰라요!', 2);
INSERT INTO TBL_POST 
VALUES(SEQ_POST.NEXTVAL, '레전드 네버다이', '나는야 페이커', 1);

SELECT *
FROM TBL_USER;

SELECT *
FROM TBL_POST;

SELECT *
FROM TBL_REPLY;

-- 댓글 
INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '한민이형 감히', 6, 1);
INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '한민이형 넌 별것도 아니야!', 6, 3);
INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '한민이형은 나의 도구', 6, 4);
INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '한민이형 밥 좀 봐줘요', 6, 5);
INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '그램보다 콩순이', 2, 1);
INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '갤럭시북 세일할 때 사세요', 1, 4);
INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '와 저건 저항 받겠다. 인성 ㄷㄷ', 3, 2);
INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '맥북 에어 사세요', 4, 4);
INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '한민이형 질문 좀 해도 될까요', 6, 1);


-- FK
SELECT *
FROM TBL_POST;

-- PK
SELECT *
FROM TBL_USER;

-- FK
SELECT *
FROM TBL_REPLY;

-- 게시판 최신글 정렬
SELECT TP.ID, TP.POST_TITLE, TU.USER_EMAIL
FROM TBL_POST TP
JOIN TBL_USER TU
ON TP.USER_ID = TU.ID
ORDER BY ID DESC;

-- 댓글을 단 사용자
SELECT TR.REPLY_CONTENT, TU.USER_EMAIL
FROM TBL_REPLY TR
JOIN TBL_USER TU
ON TR.USER_ID = TU.ID
WHERE REPLY_CONTENT LIKE '%한민%'
GROUP BY HAVING 
ORDER BY 

/*
 * SQL의 실행 순서
 * 
 * FROM > JOIN > ON > WHERE > GROUP BY > HAVING > SELECT > ORDER BY
 * 
 * */

-- 주문 날짜, 사용자의 이름
-- 주문자 정보 조회
SELECT TBO.ORDER_START_DATE, TBB.BUYER_NAME 
FROM TBL_ORDER TBO
JOIN TBL_BUYER TBB
ON TBO.BUYER_ID = TBB.ID
-- 등가조인이면서 이너조인

-- 09/16

-- 가장 인기 많은 상품을 구매한 
-- 사용자의 정보와 상품 이름을 조회
SELECT TBU.*, TBP.PRODUCT_NAME
FROM (
   SELECT *
   FROM TBL_ORDER TBO
   WHERE PRODUCT_ID = (
      SELECT PRODUCT_ID
      FROM TBL_ORDER
      GROUP BY PRODUCT_ID
      HAVING COUNT(PRODUCT_ID) = (
         SELECT MAX(COUNT(PRODUCT_ID))
         FROM TBL_ORDER
         GROUP BY PRODUCT_ID
      )
   )
) TBO
JOIN TBL_BUYER TBU
ON TBO.BUYER_ID = TBU.ID
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID = TBP.ID;


-- 가장 인기 많은 상품을 구매한 
-- 사용자의 정보와 상품 이름을 조회
SELECT *
FROM TBL_ORDER TBO
JOIN TBL_BUYER TBU           -- 사용자          
ON TBO.BUYER_ID = TBU.ID     
JOIN TBL_PRODUCT TBP         -- 상품
ON TBO.PRODUCT_ID = TBP.ID   
WHERE TBP.ID = (
   SELECT PRODUCT_ID
   FROM TBL_ORDER
   GROUP BY PRODUCT_ID
   HAVING COUNT(PRODUCT_ID) = (
      SELECT MAX(COUNT(PRODUCT_ID))
      FROM TBL_ORDER
      GROUP BY PRODUCT_ID
   )
);

SELECT *
FROM TBL_PRODUCT;

SELECT *
FROM TBL_BUYER;

SELECT *
FROM TBL_ORDER;

-- 1) 상품 이름과 총 판매 매출 조회
SELECT PRODUCT_NAME AS "상품명",
	COUNT(PRODUCT_ID) * PRODUCT_PRICE AS "매출"
FROM TBL_ORDER TBO
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID = TBP.ID 
GROUP BY PRODUCT_ID , PRODUCT_NAME, PRODUCT_PRICE;

-- 2) 상품을 구매한 20 ~ 30대 구매자의 수 조회

-- TBL_BUYER, TBL_ORDER

SELECT COUNT(BUYER_AGE)
FROM TBL_BUYER TBU
JOIN TBL_ORDER TBO
ON TBU.ID = TBO.BUYER_ID 
WHERE BUYER_AGE >= 20 AND BUYER_AGE < 40;


-- 3) 뉴발란스를 구매한 20대 구매자의 이름 조회
SELECT TBU.BUYER_NAME
FROM (
   SELECT *
   FROM TBL_ORDER
   WHERE PRODUCT_ID = (
      SELECT ID
      FROM TBL_PRODUCT
      WHERE PRODUCT_BRAND ='뉴발란스'
   ) 
) TBO
JOIN TBL_BUYER TBU
ON TBO.BUYER_ID = TBU.ID
WHERE TBU.BUYER_AGE = 20;


SELECT *
FROM TBL_BUYER;

SELECT *
FROM TBL_ORDER;
-- BUYER_ID, PRODUCT_ID

SELECT *
FROM TBL_PRODUCT;

--4) 여성의 나이대별 평균 지출 금액 조회
-- JOIN 부터

-- 정답
SELECT 
   TBU.BUYER_AGE, 
   ROUND(AVG(TBP.PRODUCT_PRICE), 2)
FROM TBL_ORDER TBO 
JOIN TBL_BUYER TBU
ON TBO.BUYER_ID = TBU.ID
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID = TBP.ID
WHERE TBU.BUYER_GENDER = '여'
GROUP BY TBU.BUYER_AGE
ORDER BY ROUND(AVG(TBP.PRODUCT_PRICE), 2) DESC;


SELECT AVG(PRODUCT_PRICE)
FROM TBL_PRODUCT;

-- TBL_BUYER , TBL PRODUCT
SELECT BUYER_AGE
FROM TBL_BUYER
WHERE BUYER_GENDER = '여'
GROUP BY BUYER_AGE;

SELECT PRODUCT_NAME AS "상품명",
	COUNT(PRODUCT_ID) * PRODUCT_PRICE AS "매출"
FROM TBL_ORDER TBO

--5) 쇼핑몰의 총 판매 액수 조회
-- 강사님 풀이
SELECT SUM(TBP.PRODUCT_PRICE) AS "쇼핑몰 총 매출"
FROM TBL_ORDER TBO 
JOIN TBL_BUYER TBU
ON TBO.BUYER_ID = TBU.ID
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID = TBP.ID;


SELECT SUM(COUNT(PRODUCT_ID) * PRODUCT_PRICE) 
FROM TBL_PRODUCT TBP
JOIN TBL_ORDER TBO 
ON TBP.ID = TBO.PRODUCT_ID 
GROUP BY PRODUCT_PRICE , PRODUCT_ID;


SELECT *
FROM TBL_ORDER;

SELECT *
FROM TBL_PRODUCT;

SELECT *
FROM TBL_BUYER;

--6) 가장 매출이 적은 상품을 구매한 사용자의 이름과, 상품명 조회
-- 상품별로 묶어야 함

-- TBL_PRODUCT, TBL_ORDER
-- 매출 : PRODUCT_ID * PRODUCT_PRICE

-- 매출이 가장 적은 상품
SELECT (COUNT(PRODUCT_ID) * PRODUCT_PRICE) 
FROM TBL_PRODUCT TBP
JOIN TBL_ORDER TBO 
ON TBP.ID = TBO.PRODUCT_ID 
GROUP BY PRODUCT_PRICE , PRODUCT_ID
ORDER BY (COUNT(PRODUCT_ID) * PRODUCT_PRICE) ASC;


SELECT ID * PRODUCT_PRICE
FROM TBL_PRODUCT;

-- ID별 상품
SELECT PRODUCT_ID 
FROM TBL_ORDER
GROUP BY PRODUCT_ID;

--7) 경기도에 거주한 사람이 구매한 상품과, 사용자 정보를 조회
-- BUYER + PRODUCT
SELECT TBP.*, TBU.*
FROM TBL_ORDER TBO
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID = TBP.ID
JOIN TBL_BUYER TBU
ON TBO.BUYER_ID = TBU.ID
WHERE TBU.BUYER_ADDRESS LIKE '%경기도%';


-- 경기도에 거주한 사람
SELECT *
FROM TBL_BUYER
WHERE BUYER_ADDRESS LIKE '%경기도%';

SELECT *
FROM TBL_PRODUCT;

SELECT *
FROM TBL_ORDER;

SELECT *
FROM TBL_BUYER;

--8) 30대 남성이 가장 많이 구매한 상품의 이름 조회
SELECT MAX(TBP.PRODUCT_NAME) 
FROM TBL_ORDER TBO
JOIN TBL_BUYER TBU 
ON TBO.BUYER_ID = TBU.ID
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID  = TBP.ID
GROUP BY BUYER_AGE
HAVING TBU.BUYER_AGE = 30;

--9) 가장 적게 판매된 상품의 이름
SELECT 

--10) 평균 나이보다 많은 사용자들이 구매한 상품과 사용자의 정보 조회
--11) 20대 여성이 구매한 상품 이름과 주문 건수 조회
--12) 가장 인기가 없는 상품 조회

